* SKT VOC 분석(TA) POC Lessons Learned

1. SKT VOC 분석(TA) POC 개요

    - 본 POC는 SKT 고객센터에서 고객상담 음성(VOC)파일을 텍스트화(STT) 한 후 그 텍스트를 분석하여 고객의 요구사항 키워드를 추출하고 분류하여 그 정보를 마케팅에 활용.
 
    - POC 목적

        --> 고객과 상담사로 화자 분리된 STT 파일을 활용해서 키워드 추출해서 해당 파일에 태킹
        --> 파일별로 태킹된 키워드를 이용해서 Topic 분류 및 통계정보로 활용
        --> 기존의 통계적인 분석방법에서 벗어나 딥러닝을 도입해 좀더 다양한 분석결과를 도출 
        --> STT 파일을 분석해서 어느 정도의 정보를 재가공할 수 있는지 확인
        --> 이후 본 프로젝트에 POC 결과를 적극 활용

2. POC 업무 프로세스

    - R&R 확립

        --> SKT(고객사)
        --> SKCNC: STT 생성 및 Topic 분류(클러스터링)
        --> POC Team(Nextobe / 뉴로어소시에이츠): 화자분리된 STT를 활용해서 키워드 추출 및 태깅

    - 업무보고 회의

        --> 정기 주간회의(화요일4시): 주간 진행사항 보고
        --> 비정기적인 기술미팅(상시 수행): 개발 진행시 필요한 경우 상시 기술미팅 수행

    - 협업 시스템
 
        --> POC Team 에서 개발관련 자료를 공유하기 위하여 Github 를 활용
        --> 업무데이터 공유 및 개발 소스코드 형상관리
        --> 소스코드 자료: https://github.com/jinsoo21/consulting
        --> 업무보고 자료: https://github.com/neptune0108/skt_project

        --> SKTCNC 와 협업(자료공유)을 위해 개발장비 공유 디렉토리 활용

3. VOC 분석 시스템 구축

    - 구축시스템 개요

        --> VOC 분석 시스템은 주어진 STT 파일을 이용해 다양한 정보를 추출하고 분석해서 업무에 활용가능하도록 하는 시스템임.
        --> VOC 분석 시스템은 전처리기, 형태소 분석기, Words Vector 생성, 클러스터링/분류/파라그래프 분류기, 키워드 분석기로 구성

    - 구축시스템 as-is 및 to-be

    1) 전처리기

       * as-is
       -> 전체 문서들을 분석단위 토큰으로 분리
       -> 분리된 토큰 중 불용어 처리

       * to-be
       -> 전체적인 전처리 과정의 효율을 높이기 위해 병목현상이 일어나는 구간에서 병렬처리 하도록 분리
         (현재 특정한 두 구간에서 16개의 CPU로 병렬처리 하는 과정을 적용하였으며, 더욱 많은 병목 구간에 활용 가능 할 것으로 기대)
       -> 자연어처리에서 사용하는 다양한 전처리 기법(토큰의 대체 및 수정, 토큰간 유사도 측정 등)을 도입해 분석 성능 향상 기대
         
  
    2) 형태소분석기

       * as-is
       -> Mecab 형태소 분석기를 이용한 형태소 분석
       -> 사용자 정의(SKCNC) 사전 적용 (현 9000개 단어)

       * to-be
       -> Mecab 형태소 분석기 한계 발견 (해외 로밍 -> '해외' '로' '밍') (로밍 -> '로밍')
       -> 로밍 앞에 명사가 붙을 경우 '로' 와 '밍' 이 분리됨 
    
       -> 해결책 
         (1) 이와 같은 형태소 분석 한계 해결 위해 띄어쓰기 기준으로 하여 '명사'가 아닌 토큰의 경우에도 분석 단위로 처리
         (2) Mecab / Twitter 등 비교 하여 모든 경우의 수 포함하도록 조정

       -> POC 기간이 짧아 적용하지 못했던 사용자 사전 도입

    3) Words Vector 구성 

       * as-is
       -> 형태소 분석까지 마친 토큰들을 이용해 Words Vector 구성
       -> tf-idf / bayes 정의를 활용해서 Words Vector 구성
       -> 각 문서에서 Word 간의 동시 출현비율을 기반으로한 네트워크를 구성

       * to-be
       -> Word-Network의 관계도를 idf값과 word-count 가중치를 조절하도록 하여, 최적 network에 대해 tuning 해볼 수 있음
       -> 전체 문서들에서 연산되는 Word-Network / 특정 topic(ex)안심옵션, 해외로밍 등)에 해당하는 문서들에서의 Word-Network를 생성할 수 있음
       -> Clustering 및 키워드 뭉치 연산 강화 가능
       -> 각 Document 단위 -> 각 Paragraph 단위로 Word 간의 동시 출현비율을 기반으로 한 머신러닝 네트워크를 구성 가능

    4) 클러스터링 / 분류 / 파라그래프 분류

       * as-is
       -> 한 문장당 sentence의 존재 여부를 기반으로 파라그래프 분류를 진행

       * to-be
       -> 클러스터링값을 기반으로 supervised deep-learning network를 구성하여 topic_classification을 자동으로 하는 딥러닝 기술 적용 가능
       -> 문서에서 paragraph를 분리 할 때, 문서의 의미(sementic)를 참조하여 분리 할수 있도록 진행 가능
    
    5) 키워드 분석(키워드 / 키워드 뭉치 / 문장단위 키워드 뭉치)

       * as-is
       -> 전체 문서를 분석한 Word-Network 기반으로 키워드 뭉치 작성
 
       * to-be
       -> (Paragraph 별 / Topic 별) 키워드 뭉치를 독립적으로 연산하여 추출 하도록 진행
       -> 문장단위 키워드 정보를 학습하여 키워드 뭉치에 대한 정확도롤 높이는 작업 가능

4. VOC 분석 시스템 To-Be

    1) 현 프로세스의 모듈화 / 자동화 / 속도 향상
       -> 모듈화 : 각 function을 분리 할 수 있도록 조정 -> 타인이 function call 만으로 전체 프로세스를 조정할 수 있도록 수정
       -> 자동화 : 전처리 -> 분석 -> 결과 과정을 자동으로 진행하여, 사용자가 두,세번의 command로 원하는 결과물 추출
       -> 속도 향상 : 전처리, 분석, 결과 추출 과정 중 병목 현상이 일어나는 부문을 일부 cpu 병렬처리를 통해 속도를 향상시키도록 수정
    
    2) 현재 추출되는 결과물의 성능 향상
       -> paragraph의 분리
       -> keyword 추출
       -> word-relation-network 다각화(topic 별, tuning 별)
       -> 전처리 과정의 고도화
     
    3) 문서 분석 다각화 / 분류과정 딥러닝 적용
       -> 문서 분석 다각화 
       (1) 불만, 문의 등의 사용자 의도를 내포하는 단어/문장/문단 분리 및 파악
       (2) 실시간으로 문서 내용을 파악하여 새로운 클러스터가 등장하거나 없어질 수 있도록 진행
       (3) 고객의 불만사항을 선처리 할 수 있도록 하기위한 방법 강구
    
       -> 분류과정 딥러닝 적용
       (1) 기존에 자주 나타난 주제의 경우 딥러닝 학습을 통해 자동으로 문서 주제를 예측 할 수 있음

    4) VOC 분석 및 활용의 패러다임 변화
       -> 단순하게 분석된 통계결과를 활용하는 방법에서 분석된 다양한 정보를 학습해서 향 후에 발생할 결과를 예측해 고객의 불만사항에 선재적으로 대응하는 방법으로 변화
       -> 예를 들어 불만을 표시한 고객의 개인정보를 상세히 활용할 수 있다면 그 정보를 학습해서 향 후에 불만을 가질 고객 후보군을 예측할 수 있다.
       -> 또한 이미 불만을 가졌던 고객이 다시 불만을 제기할 확률을 예측할 수 있다.

       -> VOC 분석을 통해 고객의 다양한 요구사항 트랜드를 탐지하고 그 변화의 추세를 분석해서 미래의 요구사항을 예측할 수 있다.

5. 교훈

    1) 업무진행시 문제점 및 교훈

       * 문제점
       -> POC 시작전 여러차례 기술 미팅이 있었으나 구현되야 하는 시스템에 대한 정확한 요구사항 및 End-Feature가 명확하지 않은 상태에서 POC 가 시작됨.
       -> 따라서 구현되야 하는 기능들에 대해서 각 프로젝트 수행 주체들간 이해도에 차이가 있어 초기에 시행착오가 발생함
       -> POC Team이 고객상담 업무에 대한 이해가 없어 시스템 구현 초기 시행착오가 발생함

       * 교훈
       -> 프로젝트 시작전 프로젝트의 목표 및 시스템의 End-Feature를 명확히 하기위한 사전 작업이 반듯이 필요.
       -> 프로젝트 참여 주체간의 용어사용의 차이에 의해서 의사소통의 문제가 발생할 수 있으므로 사전에 용어사전을 공유할 필요가 있음.
       -> 개발팀도 사전에 구현해야 하는 업무에 대한 이해를 높이기 위한 준비가 필요.

    2) 시스템 구축
  
       * 문제점
       -> POC Team은 최초 VOC 분석과 관련된 기술적인 이슈(적정한 키워드 추출의 기술적 가능성)에 대한 부분에서만 시스템 구축을 고려하였으나 업무의 이해와 관련된 부분에서 지속적으로 요구사항이 발생
       -> POC 참여 전 고려해서 미리 설계/구축했던 시스템 모듈들에 지속적으로 발생한 요구사항을 처리하기 위한 임시 구현 모듈이 복잡하게 추가되어 POC 후반부에는 유지보수가 힘들정도로 문제가 발생

       * 교훈
       -> 시스템 구현 전 상세한 설계작업이 반듯이 필요.
       -> 가능한 추가 요구사항이 발생하지 않도록 시스템의 End-Feature를 명확히 하고 시스템 구현 범위를 명확히 하기 위한 사전 준비작업이 반듯이 필요.

    3) 개발환경

       * 문제점 
       -> POC Team 인원이 4명이나 실제 개발장비는 PC 2대로 개발인력 운용에 문제가 발생
       -> POC 시작 시 개발장비에 필요한 소프트웨어 설치를 요청하였으나 SKT 내부방침(?)으로 최적화된 OS 및 패키지를 설치하지 못함.
       -> 따라서 POC 도중 개발장비의 OS를 재 설치하는 상황이 발생하였고 몇일간 작업을 하지 못하는 상황이 발생함.

       * 교훈
       -> 투입된 개발인력 만큼의 개발장비(PC)를 제공 받을 수 있도록 사전에 노력이 필요
       -> 개발장비(Sever)의 OS 및 설치 패키지는 가능한 시작전 최적화 하고 모두 테스트를 해서 이후 문제가 발생하지 않도록 사전에 차단.
