* Python Coding Convention

본 Coding Convention 은 PET 8(Python Enhance Proposal)에서 제안 하는 내용을 기본으로 따릅니다.

1. 규칙 예외 사항 
  -- 스타일 가이드의 일관선은 중요하지만 그보다 더 중요한 것은 프로젝트 전체의 일관성은 더욱 중요하며, 하나의 모듈이나 함수의 일관성은 더더욱 중요하다.      
  -- 다음과 같은 두 가지의 사항에 있어서 규칙을 지키지 않는 것을 심각하게 고려하여 판단 한다.
    == 규칙을 적용한 코드가 (규칙을 숙지한 사람들 눈에도) 읽기 어려운 경우      
    == 일관성을 지키려고 한 수정이 다른 규칙을 어기는 경우
    
2. 사용 Python Version  
  -- Python 3.5.2
  
3. Source File Encoding   
  -- Python3 은 항상 UTF-8 방식을 사용한다.    
  -- Python3 은 따라서 별도의 인코딩 방식의 정의가 필요하지 않다.   
  -- Python3 이상의 버전에서는 ASCII 로만 이루어진 식별자를 사용해야 하며, 반드시 영어 단어를 사용하도록 권장한다. 
  
4. Code Lay-Out
  -- 들여쓰기(Indentation)
    == 들여쓰기는 공백(Space) 4칸을 권장(Python3은 space, tap 혼용을 금한다.)      
    == 연속되는 문장은 괄호(소, 중, 대)를 이용하여 수직 정렬하거나 'hanging indent'를 사용한다.      
    == 다양한 hanging indent 예시    
    == if문 예시    
    == 여러 줄의 생성자의 닫히는 괄호(소, 중, 대)는 마지막 줄의 공백이 아닌 첫번째 문자(요소) 위치에 오거나 마지막 줄에서 생성자가 시작되는 첫번째 열에 위치한다.
    
  -- 한줄 최대 길이(Maximun Line Length)
    == 모든 코드는 한 줄에 최대 79자 까지 쓰는 것을 허용한다.      
    == Docstring 또는 주석은 72자 까지 쓰도록 한다.    
    == 여러 줄로 길게 표현되는 문장은 괄호(소, 중, 대)를 이용해 여러 행으로 분리해 표현    
    == 어떤 경우에는 백슬래시(backslash)를 사용해 연속되는 문장의 줄바뀜을 표현하는 것이 적절하다.     
    == with문 예시
    
  -- 이항연산자 줄바뀜
    == 이항연산자의 줄바뀜 위치로 연산자의 앞, 뒤 모두를 허용한다.     
    == 하지만 가독성을 고려해 연산자의 앞에서 줄바꿈 하는 것을 권장한다.(최신 표현법)
  
  -- 빈줄(Blank Lines)        
    == 최상위(Top-Level) 함수와 클래스 정의는 2줄씩 띄어 쓰기    
    == 클래스 내의 메소드 정의는 1줄씩 띄어 쓰기
  
  -- 임포트(Import)
    == Import는 반드시 행을 분리해서 선언한다.    
    == 다음의 경우는 예외로서 허용된다.    
    == Import는 파일 상단의 파일 주석과 Docstring 바로 아래, 그리고 전역변수, 상수 선언부 위에 위치한다.     
    == Import는 아래의 순서로 그룹지어 선언한다.      
      --> standard library imports     
      --> related third party imports  
      --> local application/libarary specific imports 
    == Import 그룹 각각은 빈 줄 하나로 구분한다.  
    == Improt는 절대경로를 이용한 방법을 권장한다. (가독성을 높여주고 동작도 더 잘 되도록 한다.)   
    == 와일드카드 Import는 절대 사용하지 않는다. 
 
  -- 모듈 레벨의 dunder names        
    == 모듈 레벨의 dunder(앞 뒤로 밑줄 2개씩 있는 것)은 Docstring 뒤에 그리고 Import 선언 앞에 와야 한다.    
    == from __future__ import는 Docstring 바로 뒤에 그 어떤 코드보다 먼저 위치해야 한다. 그 뒤에 dunder가 위치
    
5. 따옴표(String Quotes)
  -- Python에서 문자열을 표현할때 큰 따옴표, 작은 따옴표 아무거나 사용이 가능하다.   
  -- 가독성을 고려해 이스케이프 문자 사용을 피하도록 적절히 따옴표를 선택해 사용.  
  -- 세 개의 따옴표를 사용할 때에는 반드시 큰 따옴표를 사용
  
6. 표현식 내에서 공란 처리(Whitespace in Expressions and Statements)   
  -- 아래와 같은 상황에서 무의미한 공백을 피하자.
    == 괄호(소, 중, 대) 안의 양쪽 끝   
    == 콤마, 세미콜론, 콜론 바로 앞
    == 슬라이스에서 콜론은 우선 순위가 낮은 이항연산자와 유사항 방식으로 사용되며 양쪽에 동일한 공간을 할당해야 한다. 
    == 확장된 슬라이스에서 모든 콜론은 같은 크기의 공간이 할당되어야 한다.  
    == 피연산자가 누락되었을 경우 공백을 주지 않는다.
    == 함수 호출 시 뒤 인자를 넣기 위한 소괄호의 바로 앞
    == 리스트나 사전의 인덱스나 슬라이스에 사용되는 대괄호의 바로 앞
    == 대입 연산자의 앞뒤는 공백을 주어야 함
    == 기타 유의사항
      --> 문장의 마지막에 따라오는 공백을 없게 하자.(잘 안보이기 때문에 혼란이 발생할 수 있다.)     
      --> 모든 이항연산자(대입, 증감, 비교, 부울(Boolean)) 앞뒤로는 공백을 두어야 한다.
      --> 우선순위가 다른 연산자를 동시에 사용할 경우 낮은 순위의 연산자에 공백을 주여야 한다.      
      --> 절대 한 칸을 초과하는 공백을 사용해서는 안되며, 이항연산자의 양쪽은 같은 공백을 갖도록 해야 한다.
      --> 키워드 인자나 디폴트 인자에 사용되는 대입연산자는 절대로 공백을 사용하지 않는다.
      --> Function annotation에 사용되는 콜론은 기존의 룰을 따르며, '->'는 양 옆에 공백을 한 칸씩 가진다.
      --> argument annotation을 디폴트 변수에 사용할 때, 기존의 디폴트 변수에 사용할 때의 공백 없는 대입연산자와는 다르게 대입연산자 앞 뒤에 공백을 한 칸씩 가진다.
      --> 여러 구문이 한 줄에 오는 것은 보통 권장하지 않는다.
      --> 예외적으로 짧은 길이의 if, for, while 구문에서 여러 구문을 한 줄에 써도 되지만, 절대로 여러 줄의 절에서는 한 줄에 쓰면 안된다.               --> 긴 줄에서의 폴딩을 피해라

7. 주석(Comments)
  * 주석은 코드가 업데이트 될 때마다 반드시 같이 업데이트 해야 한다.  
  * 주석은 반드시 완전한 문장형태여야 한다. 만약 주석이 구문이거나 한 문장일 경우, 첫 글자는 대문자를 쓴다.(첫 단어가 소문자 식별자 인 경우 그대로 소문자를 사용)  
  * 주석이 짧을 경우 마침표가 생략될 수 있다.   
  * 블록 주석의 경우 주로 완전한 문장을 사용하며 문장의 마지막은 마침표로 끝난다.   * 마침표 뒤에는 두 칸의 공백을 준다.   
  * 주석은 가능한 영어로 쓰도록 권장.
  
  -- 블록 주석(Block Comments)
    == 블록 주석은 뒤에 따라오는 코드에 대한 설명
    
    
참고
http://yoonpunk.tistory.com/1
https://spoqa.github.io/2012/08/03/about-python-coding-convention.html
